//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 14.11.2017 23:49:49
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.ComponentModel;
using System.Reflection;
using System.Data.Common;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;

namespace abdModel
{

    public partial class abdModel : DbContext
    {

        public abdModel() :
            base()
        {
            OnCreated();
        }

        public abdModel(DbContextOptions<abdModel> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null))
                optionsBuilder.UseMySQL(@"persistsecurityinfo=True;server=localhost;port=15000;user id=tomasz152;password=bombelek;database=abd");
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<Harmonogram> Harmonograms
        {
            get;
            set;
        }

        public virtual DbSet<Przepustki> Przepustkis
        {
            get;
            set;
        }

        public virtual DbSet<Skazany> Skazanies
        {
            get;
            set;
        }

        public virtual DbSet<Wyrok> Wyroks
        {
            get;
            set;
        }

        public virtual DbSet<Zajecia> Zajecias
        {
            get;
            set;
        }

        #region Methods

        public void DodajPunkty (System.Nullable<int> p_Dodatkowe_Punkty, System.Nullable<int> p_ID_Pracowania)
        {


            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"abd.DodajPunkty";

                    DbParameter p_Dodatkowe_PunktyParameter = cmd.CreateParameter();
                    p_Dodatkowe_PunktyParameter.ParameterName = "p_Dodatkowe_Punkty";
                    p_Dodatkowe_PunktyParameter.Direction = ParameterDirection.Input;
                    if (p_Dodatkowe_Punkty.HasValue)
                    {
                        p_Dodatkowe_PunktyParameter.Value = p_Dodatkowe_Punkty.Value;
                    }
                    else
                    {
                        p_Dodatkowe_PunktyParameter.DbType = DbType.Int32;
                        p_Dodatkowe_PunktyParameter.Size = -1;
                        p_Dodatkowe_PunktyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(p_Dodatkowe_PunktyParameter);

                    DbParameter p_ID_PracowaniaParameter = cmd.CreateParameter();
                    p_ID_PracowaniaParameter.ParameterName = "p_ID_Pracowania";
                    p_ID_PracowaniaParameter.Direction = ParameterDirection.Input;
                    if (p_ID_Pracowania.HasValue)
                    {
                        p_ID_PracowaniaParameter.Value = p_ID_Pracowania.Value;
                    }
                    else
                    {
                        p_ID_PracowaniaParameter.DbType = DbType.Int32;
                        p_ID_PracowaniaParameter.Size = -1;
                        p_ID_PracowaniaParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(p_ID_PracowaniaParameter);

                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public void DodajUwagi (string p_Uwagi, System.Nullable<int> p_ID_Pracowania)
        {


            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"abd.DodajUwagi";

                    DbParameter p_UwagiParameter = cmd.CreateParameter();
                    p_UwagiParameter.ParameterName = "p_Uwagi";
                    p_UwagiParameter.Direction = ParameterDirection.Input;
                    if (p_Uwagi != null)
                    {
                        p_UwagiParameter.Value = p_Uwagi;
                    }
                    else
                    {
                        p_UwagiParameter.DbType = DbType.String;
                        p_UwagiParameter.Size = -1;
                        p_UwagiParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(p_UwagiParameter);

                    DbParameter p_ID_PracowaniaParameter = cmd.CreateParameter();
                    p_ID_PracowaniaParameter.ParameterName = "p_ID_Pracowania";
                    p_ID_PracowaniaParameter.Direction = ParameterDirection.Input;
                    if (p_ID_Pracowania.HasValue)
                    {
                        p_ID_PracowaniaParameter.Value = p_ID_Pracowania.Value;
                    }
                    else
                    {
                        p_ID_PracowaniaParameter.DbType = DbType.Int32;
                        p_ID_PracowaniaParameter.Size = -1;
                        p_ID_PracowaniaParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(p_ID_PracowaniaParameter);

                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public System.Nullable<sbyte> DatyWyrok (System.Nullable<System.DateTime> p_Data_Rozp, System.Nullable<System.DateTime> p_Data_Zak, System.Nullable<int> p_Nr_Sprawy)
        {

            System.Nullable<sbyte> result;

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"abd.daty_wyrok";

                    DbParameter p_Data_RozpParameter = cmd.CreateParameter();
                    p_Data_RozpParameter.ParameterName = "p_Data_Rozp";
                    p_Data_RozpParameter.Direction = ParameterDirection.Input;
                    if (p_Data_Rozp.HasValue)
                    {
                        p_Data_RozpParameter.Value = p_Data_Rozp.Value;
                    }
                    else
                    {
                        p_Data_RozpParameter.DbType = DbType.DateTime;
                        p_Data_RozpParameter.Size = -1;
                        p_Data_RozpParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(p_Data_RozpParameter);

                    DbParameter p_Data_ZakParameter = cmd.CreateParameter();
                    p_Data_ZakParameter.ParameterName = "p_Data_Zak";
                    p_Data_ZakParameter.Direction = ParameterDirection.Input;
                    if (p_Data_Zak.HasValue)
                    {
                        p_Data_ZakParameter.Value = p_Data_Zak.Value;
                    }
                    else
                    {
                        p_Data_ZakParameter.DbType = DbType.DateTime;
                        p_Data_ZakParameter.Size = -1;
                        p_Data_ZakParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(p_Data_ZakParameter);

                    DbParameter p_Nr_SprawyParameter = cmd.CreateParameter();
                    p_Nr_SprawyParameter.ParameterName = "p_Nr_Sprawy";
                    p_Nr_SprawyParameter.Direction = ParameterDirection.Input;
                    if (p_Nr_Sprawy.HasValue)
                    {
                        p_Nr_SprawyParameter.Value = p_Nr_Sprawy.Value;
                    }
                    else
                    {
                        p_Nr_SprawyParameter.DbType = DbType.Int32;
                        p_Nr_SprawyParameter.Size = -1;
                        p_Nr_SprawyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(p_Nr_SprawyParameter);
                    
                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.SByte;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    result = (System.Nullable<sbyte>)returnValueParameter.Value;
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public System.Nullable<int> IleCzasuPozostało (System.Nullable<System.DateTime> p_Data_Rozp, System.Nullable<System.DateTime> p_Data_Zak)
        {

            System.Nullable<int> result;

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"abd.IleCzasuPozostało";

                    DbParameter p_Data_RozpParameter = cmd.CreateParameter();
                    p_Data_RozpParameter.ParameterName = "p_Data_Rozp";
                    p_Data_RozpParameter.Direction = ParameterDirection.Input;
                    if (p_Data_Rozp.HasValue)
                    {
                        p_Data_RozpParameter.Value = p_Data_Rozp.Value;
                    }
                    else
                    {
                        p_Data_RozpParameter.DbType = DbType.DateTime;
                        p_Data_RozpParameter.Size = -1;
                        p_Data_RozpParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(p_Data_RozpParameter);

                    DbParameter p_Data_ZakParameter = cmd.CreateParameter();
                    p_Data_ZakParameter.ParameterName = "p_Data_Zak";
                    p_Data_ZakParameter.Direction = ParameterDirection.Input;
                    if (p_Data_Zak.HasValue)
                    {
                        p_Data_ZakParameter.Value = p_Data_Zak.Value;
                    }
                    else
                    {
                        p_Data_ZakParameter.DbType = DbType.DateTime;
                        p_Data_ZakParameter.Size = -1;
                        p_Data_ZakParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(p_Data_ZakParameter);
                    
                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    result = (System.Nullable<int>)returnValueParameter.Value;
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public System.Nullable<int> IleLat (System.Nullable<System.DateTime> p_Data_Uro)
        {

            System.Nullable<int> result;

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"abd.IleLat";

                    DbParameter p_Data_UroParameter = cmd.CreateParameter();
                    p_Data_UroParameter.ParameterName = "p_Data_Uro";
                    p_Data_UroParameter.Direction = ParameterDirection.Input;
                    if (p_Data_Uro.HasValue)
                    {
                        p_Data_UroParameter.Value = p_Data_Uro.Value;
                    }
                    else
                    {
                        p_Data_UroParameter.DbType = DbType.DateTime;
                        p_Data_UroParameter.Size = -1;
                        p_Data_UroParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(p_Data_UroParameter);
                    
                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    result = (System.Nullable<int>)returnValueParameter.Value;
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public System.Nullable<int> IleRóżnychOsóbWykonuje (System.Nullable<int> p_ID_Pracowania)
        {

            System.Nullable<int> result;

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"abd.IleRóżnychOsóbWykonuje";

                    DbParameter p_ID_PracowaniaParameter = cmd.CreateParameter();
                    p_ID_PracowaniaParameter.ParameterName = "p_ID_Pracowania";
                    p_ID_PracowaniaParameter.Direction = ParameterDirection.Input;
                    if (p_ID_Pracowania.HasValue)
                    {
                        p_ID_PracowaniaParameter.Value = p_ID_Pracowania.Value;
                    }
                    else
                    {
                        p_ID_PracowaniaParameter.DbType = DbType.Int32;
                        p_ID_PracowaniaParameter.Size = -1;
                        p_ID_PracowaniaParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(p_ID_PracowaniaParameter);
                    
                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    result = (System.Nullable<int>)returnValueParameter.Value;
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public System.Nullable<int> Punkty (System.Nullable<int> p_Nr_Sprawy)
        {

            System.Nullable<int> result;

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"abd.punkty";

                    DbParameter p_Nr_SprawyParameter = cmd.CreateParameter();
                    p_Nr_SprawyParameter.ParameterName = "p_Nr_Sprawy";
                    p_Nr_SprawyParameter.Direction = ParameterDirection.Input;
                    if (p_Nr_Sprawy.HasValue)
                    {
                        p_Nr_SprawyParameter.Value = p_Nr_Sprawy.Value;
                    }
                    else
                    {
                        p_Nr_SprawyParameter.DbType = DbType.Int32;
                        p_Nr_SprawyParameter.Size = -1;
                        p_Nr_SprawyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(p_Nr_SprawyParameter);
                    
                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    result = (System.Nullable<int>)returnValueParameter.Value;
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        #endregion

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            this.HarmonogramMapping(modelBuilder);
            this.CustomizeHarmonogramMapping(modelBuilder);

            this.PrzepustkiMapping(modelBuilder);
            this.CustomizePrzepustkiMapping(modelBuilder);

            this.SkazanyMapping(modelBuilder);
            this.CustomizeSkazanyMapping(modelBuilder);

            this.WyrokMapping(modelBuilder);
            this.CustomizeWyrokMapping(modelBuilder);

            this.ZajeciaMapping(modelBuilder);
            this.CustomizeZajeciaMapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }
    
        #region Harmonogram Mapping

        private void HarmonogramMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Harmonogram>().ToTable(@"harmonogram", @"abd");
            modelBuilder.Entity<Harmonogram>().Property<int>(x => x.IDPracowania).HasColumnName(@"ID_Pracowania").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Harmonogram>().Property<System.DateTime>(x => x.DataRozpoczecia).HasColumnName(@"Data_Rozpoczecia").HasColumnType(@"date").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Harmonogram>().Property<System.TimeSpan>(x => x.GodzinaRozpoczecia).HasColumnName(@"Godzina_Rozpoczecia").HasColumnType(@"time").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Harmonogram>().Property<System.DateTime>(x => x.DataZakonczenia).HasColumnName(@"Data_Zakonczenia").HasColumnType(@"date").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Harmonogram>().Property<System.TimeSpan>(x => x.GodzinaZakonczenia).HasColumnName(@"Godzina_Zakonczenia").HasColumnType(@"time").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Harmonogram>().Property<System.Nullable<int>>(x => x.DodatkowePunkty).HasColumnName(@"Dodatkowe_Punkty").HasColumnType(@"int").ValueGeneratedNever().HasDefaultValueSql(@"0");
            modelBuilder.Entity<Harmonogram>().Property<string>(x => x.Uwagi).HasColumnName(@"Uwagi").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<Harmonogram>().Property<int>(x => x.NrSprawy).HasColumnName(@"Nr_Sprawy").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Harmonogram>().Property<int>(x => x.IDZajecia).HasColumnName(@"ID_zajecia").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Harmonogram>().HasKey(@"IDPracowania");
        }
	
        partial void CustomizeHarmonogramMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region Przepustki Mapping

        private void PrzepustkiMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Przepustki>().ToTable(@"przepustki", @"abd");
            modelBuilder.Entity<Przepustki>().Property<int>(x => x.IDPrzepustki).HasColumnName(@"ID_Przepustki").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Przepustki>().Property<System.DateTime>(x => x.DataRozpoczecia).HasColumnName(@"Data_Rozpoczecia").HasColumnType(@"date").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Przepustki>().Property<System.DateTime>(x => x.DataZakonczenia).HasColumnName(@"Data_Zakonczenia").HasColumnType(@"date").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Przepustki>().Property<int>(x => x.WykorzystanePunkty).HasColumnName(@"Wykorzystane_Punkty").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Przepustki>().Property<int>(x => x.NrSprawy).HasColumnName(@"Nr_Sprawy").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Przepustki>().HasKey(@"IDPrzepustki");
        }
	
        partial void CustomizePrzepustkiMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region Skazany Mapping

        private void SkazanyMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Skazany>().ToTable(@"skazany", @"abd");
            modelBuilder.Entity<Skazany>().Property<int>(x => x.IDSkazany).HasColumnName(@"ID_Skazany").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Skazany>().Property<string>(x => x.Imie).HasColumnName(@"Imie").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Skazany>().Property<string>(x => x.Nazwisko).HasColumnName(@"Nazwisko").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Skazany>().Property<System.DateTime>(x => x.DataUrodzenia).HasColumnName(@"Data_Urodzenia").HasColumnType(@"date").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Skazany>().Property<string>(x => x.PESEL).HasColumnName(@"PESEL").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Skazany>().HasKey(@"IDSkazany");
        }
	
        partial void CustomizeSkazanyMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region Wyrok Mapping

        private void WyrokMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Wyrok>().ToTable(@"wyrok", @"abd");
            modelBuilder.Entity<Wyrok>().Property<int>(x => x.NrSprawy).HasColumnName(@"Nr_Sprawy").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Wyrok>().Property<System.DateTime>(x => x.OdDnia).HasColumnName(@"Od_Dnia").HasColumnType(@"date").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Wyrok>().Property<System.DateTime>(x => x.DoDnia).HasColumnName(@"Do_Dnia").HasColumnType(@"date").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Wyrok>().Property<string>(x => x.RodzajPrzestepstwa).HasColumnName(@"Rodzaj_Przestepstwa").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Wyrok>().Property<int>(x => x.IDSkazany).HasColumnName(@"ID_Skazany").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Wyrok>().HasKey(@"NrSprawy");
        }
	
        partial void CustomizeWyrokMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region Zajecia Mapping

        private void ZajeciaMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Zajecia>().ToTable(@"zajecia", @"abd");
            modelBuilder.Entity<Zajecia>().Property<int>(x => x.IDZajecia).HasColumnName(@"ID_zajecia").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Zajecia>().Property<int>(x => x.Punkty).HasColumnName(@"Punkty").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Zajecia>().Property<string>(x => x.Opis).HasColumnName(@"Opis").HasColumnType(@"enum").ValueGeneratedNever();
            modelBuilder.Entity<Zajecia>().HasKey(@"IDZajecia");
        }
	
        partial void CustomizeZajeciaMapping(ModelBuilder modelBuilder);

        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {

        #region Harmonogram Navigation properties

            modelBuilder.Entity<Harmonogram>().HasOne(x => x.Wyrok).WithMany(op => op.Harmonograms).OnDelete(DeleteBehavior.Cascade).IsRequired(true).HasForeignKey(@"NrSprawy");
            modelBuilder.Entity<Harmonogram>().HasOne(x => x.Zajecia).WithMany(op => op.Harmonograms).OnDelete(DeleteBehavior.Cascade).IsRequired(true).HasForeignKey(@"IDZajecia");

        #endregion

        #region Przepustki Navigation properties

            modelBuilder.Entity<Przepustki>().HasOne(x => x.Wyrok).WithMany(op => op.Przepustkis).OnDelete(DeleteBehavior.Cascade).IsRequired(true).HasForeignKey(@"NrSprawy");

        #endregion

        #region Skazany Navigation properties

            modelBuilder.Entity<Skazany>().HasMany(x => x.Wyroks).WithOne(op => op.Skazany).OnDelete(DeleteBehavior.Cascade).IsRequired(true).HasForeignKey(@"IDSkazany");

        #endregion

        #region Wyrok Navigation properties

            modelBuilder.Entity<Wyrok>().HasMany(x => x.Harmonograms).WithOne(op => op.Wyrok).OnDelete(DeleteBehavior.Cascade).IsRequired(true).HasForeignKey(@"NrSprawy");
            modelBuilder.Entity<Wyrok>().HasMany(x => x.Przepustkis).WithOne(op => op.Wyrok).OnDelete(DeleteBehavior.Cascade).IsRequired(true).HasForeignKey(@"NrSprawy");
            modelBuilder.Entity<Wyrok>().HasOne(x => x.Skazany).WithMany(op => op.Wyroks).OnDelete(DeleteBehavior.Cascade).IsRequired(true).HasForeignKey(@"IDSkazany");

        #endregion

        #region Zajecia Navigation properties

            modelBuilder.Entity<Zajecia>().HasMany(x => x.Harmonograms).WithOne(op => op.Zajecia).OnDelete(DeleteBehavior.Cascade).IsRequired(true).HasForeignKey(@"IDZajecia");

        #endregion
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
